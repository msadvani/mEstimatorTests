clear all;
close all;

kappa = .8;

gauss = @(x,sigma) (2*pi*sigma.^2).^(-1/2)*exp(-x.^2./(2*sigma.^2));

sigNoise = 1.5;
fNoise = @(x) gauss(x,sigNoise);
g = @(x) 1/2*exp(-abs(x));

varNoise = sumIntIndef(@(x) x.^2.*fNoise(x), 2,10,.00001);
varCoeff = sumIntIndef(@(x) x.^2.*g(x), 2,10,.00001)

c0Hat = @(q0,c) (1/(2*kappa*(1+c).^2))*(q0 + varNoise);
cHat = @(q0,c) (1./(2*kappa*(1+c)));

a = @(q0) (q0 + varNoise)*kappa;


N=5000;
L=13;


[q0Thy,cThy] = qThyL2(kappa, 1, varCoeff, varNoise)
%Now we need to compare this with the analytic solution already worked out!

%computeConstraint1(1,1,fNoise, g,kappa,N,L,.1)
F1 = @(q0,c)computeConstraint1(q0,c,fNoise, g,kappa,N,L,.01)
F2 = @(q0,c)computeConstraint2(q0,c,fNoise, g,kappa,N,L,.01)



lambda =1;
F1Thy = @(q0,c) -q0 + (lambda^2*kappa^2*(1+c).^2*varCoeff + a(q0))./(1+lambda*kappa*(1+c)).^2
%F1Thy = @(q0,c) q0.*(1+lambda*kappa*(1+c)).^2 - (lambda^2*kappa^2*(1+c).^2*varCoeff + a(q0))

%F1Thy = @(q0,c) q0 - 1/(1+kappa*(1+c))^2*(kappa^2*(1+c)^2*varCoeff - a(q0,c)) 

F2Thy = @(q0,c) c./(1+c) - kappa./(1+lambda*kappa*(1+c))


Ftot = @(q0,c) (F1(q0,c)^2+F2(q0,c)^2);

[q0,c,err]=gridMin2d(Ftot,0,0,3,3,.01)






%% Simulation
n=800;
p = round(n*kappa);
s = 1;



numSim = 8;
qErr = zeros(1,numSim);
for cnt = 1:numSim
    X = (1/sqrt(p))*randn(n,p); %random unit normal design matrix
    
%     beta0 = randn(p,1);
    sign = 2*round(rand(p,1))-1;
    beta0 = sign.*exprnd(s,p,1);  %double exponential


%Put in laplacian here

%     sign = 2*round(rand(n,1))-1;
%     epsilon = sign.*exprnd(s,n,1);  %double exponential
    
 

    epsilon = random('logistic',0,1,n,1);
        
    %epsilon = randn(n,1);
    
    y = X*beta0 + epsilon;

    
    
    
    bMin = fminunc(@(b)(norm(y-X*b,2)^2 + lambda*norm(b,2)^2),randn(p,1));

    qErr(cnt) = (1/p)*norm(bMin - beta0,2)^2;
      
%       rho = @(x)(1/2)*x.^2;
%       
%       %sigma = @(x)zeros(size(x)); %Easy case
%       sigma = @(x) (1/2)*lambda*(x.^2);
%       
%       tic
%       [bMinS]=fminunc(@(b)sum(rho(y-X*b)), randn(p,1));
%       %[bMinS] = fminunc(@(b) sum(rho(y-X*b)) + sum(sigma(b)),randn(p,1));
%       toc
%       
%       rhoErr(cnt) = (1/sqrt(P))*norm(bMinS - beta0,2);
end


disp('Numerical Experiment: Estimate of 95% confidence interval')
[mean(qErr)-2*std(qErr),mean(qErr)+2*std(qErr)]


disp('Theory')
qThyVal



























